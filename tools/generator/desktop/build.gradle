apply plugin: 'java'
apply plugin: 'java-library'

apply from: '../../../dependencies.gradle'

group 'com.github.xpenatan.gdx-html5-tools'
version '1.0.0'

project.ext.mainClassName = "com.github.xpenatan.gdx.html5.generator.Main"
sourceSets.main.java.srcDirs = ["src/main/java/"]

configurations {
    provided
    implementation.extendsFrom provided
}

task fromClasses(type: Jar) {
    from(sourceSets.main.output) {
    }
}

dependencies {
    implementation project(":tools:generator:core")
    implementation "com.badlogicgames.gdx:gdx:$project.gdxVersion"
    implementation "com.badlogicgames.gdx:gdx-platform:$project.gdxVersion:natives-desktop"
    implementation "com.badlogicgames.gdx:gdx-backend-lwjgl:$project.gdxVersion"
    implementation "com.github.xpenatan.jDear-Imgui:imgui-core-platform:$project.jDearImguiVersion:natives-desktop"
}

task run(dependsOn: classes, type: JavaExec) {
    group = 'other'
    description = 'Run core example'

    main = project.mainClassName
    classpath = sourceSets.main.runtimeClasspath
}

task copyDependencies(type: Copy) {
    from { configurations.default }
            {
                exclude "core*.jar"
                exclude "jorbis-*.jar"
                exclude "sac-*.jar"
                exclude "validation-api-*.jar"
                exclude "jutils-*.jar"
                exclude "jsinterop-*.jar"
                exclude "jlayer-*.jar"
                exclude "jinput-*.jar"
                exclude "javax.*.jar"
                exclude "gwt-user*.jar"
            }
    into 'build/libs/dependencies'
}

def projectsToCollect = [':tools:generator:desktop', ':tools:generator:core']

task dist(type: Jar, dependsOn: [copyDependencies, projectsToCollect.collect { it + ":compileJava" }]) {
    duplicatesStrategy = DuplicatesStrategy.EXCLUDE
    manifest {
        attributes(
                'Main-Class': project.mainClassName
        )
    }
    from files(projectsToCollect.collect { project(it).sourceSets.main.output })
    from {
        (configurations.provided).collect
                {
                    it.isDirectory() ? it : zipTree(it)
                }
    }
    with jar
}