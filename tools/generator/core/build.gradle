group = project.groupId
version = project.toolCoreVersion

def module_name = "generator-core"

dependencies {
    implementation "com.badlogicgames.gdx:gdx:$project.gdxVersion"
    implementation project(":backends:backend-teavm")

    implementation "com.github.xpenatan.jDear-Imgui:core:$project.jDearImguiVersion"
    implementation "com.github.xpenatan.jDear-Imgui:gdx:$project.jDearImguiGdxVersion"
    implementation "com.github.xpenatan.jDear-Imgui:core-platform:$project.jDearImguiVersion:natives-desktop"

    implementation project(":extensions:gdx-freetype-teavm")
    implementation project(":extensions:gdx-bullet:gdx-bullet-teavm")
    implementation project(":extensions:gdx-box2d:gdx-box2d-teavm")

    implementation "org.eclipse.jetty:jetty-server:$project.jettyVersion"
    implementation "org.eclipse.jetty:jetty-webapp:$project.jettyVersion"
}

java {
    withJavadocJar()
    withSourcesJar()
}

publishing {
    publications {
        maven(MavenPublication) {
            artifactId = module_name
            from components.java

            pom {
                name = "gdx-teaVM"
                description = "Tool to generate libgdx to javascript using teaVM"
                url = "https://github.com/xpenatan/gdx-teavm"
                developers {
                    developer {
                        id = "Xpe"
                        name = "Natan"
                    }
                }
                scm {
                    connection = "scm:git:git://https://github.com/xpenatan/gdx-teavm.git"
                    developerConnection = "scm:git:ssh://https://github.com/xpenatan/gdx-teavm.git"
                    url = "http://https://github.com/xpenatan/gdx-teavm/tree/master"
                }
                licenses {
                    license {
                        name = "The Apache License, Version 2.0"
                        url = "https://www.apache.org/licenses/LICENSE-2.0.txt"
                    }
                }
            }
        }
    }
}

signing {
    def ver = project.version.toString()
    def isSnapshot = ver.toUpperCase().contains("SNAPSHOT")
    if(!isSnapshot) {
        def signingKey = System.getenv("signingKey")
        def signingPassword = System.getenv("signingPassword")
        useInMemoryPgpKeys(signingKey, signingPassword)
        sign publishing.publications.maven
    }
}