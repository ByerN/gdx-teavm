package com.github.xpenatan.gdx.html5.bullet.web;


import com.github.javaparser.StaticJavaParser;
import com.github.javaparser.ast.CompilationUnit;
import com.github.javaparser.ast.Node;

import java.io.ByteArrayInputStream;
import java.util.Iterator;
import java.util.List;

public class JSCodeGen {

    static String gen = "-------------------------------------------------------\n"
            + " * This file was generated by gdx-html5-tools\n"
            + " * Version 1.0.0\n"
            + " *\n * Do not make changes to this file\n"
            + " *-------------------------------------------------------";

    CustomFileDescriptor sourceDir;
    CustomFileDescriptor genDir;
    String[] includes;
    String[] excludes;
    JSCodeWrapper wrapper;

    public void generate(String sourceDir, String genDir, JSCodeWrapper wrapper, String[] excludes)  throws Exception {
        this.excludes = excludes;
        this.wrapper = wrapper;
        this.sourceDir = new CustomFileDescriptor(sourceDir);
        this.genDir = new CustomFileDescriptor(genDir);

        // check if source directory exists
        if (!this.sourceDir.exists()) {
            throw new Exception("Java source directory '" + sourceDir + "' does not exist");
        }

        if (!this.genDir.exists()) {
            if (!this.genDir.mkdirs()) {
                throw new Exception("Couldn't create directory '" + genDir + "'");
            }
        }
        else
        {
            this.genDir.deleteDirectory();
            if (!this.genDir.mkdirs()) {
                throw new Exception("Couldn't create directory '" + genDir + "'");
            }
        }
        System.out.println("***** GENERATING CODE *****");
        processDirectory(this.sourceDir);
        System.out.println("********** DONE ***********");
    }

    private void processDirectory (CustomFileDescriptor dir) throws Exception {
        CustomFileDescriptor[] files = dir.list();
        for (CustomFileDescriptor file : files) {
            if (file.isDirectory()) {
                if (file.path().contains(".svn")) continue;
                if (file.path().contains(".git")) continue;
                processDirectory(file);
            } else {
                if (file.extension().equals("java")) {
                    if (file.name().contains("NativeCodeGenerator")) continue;

                    boolean stop = false;

                    if(excludes != null)
                    {
                        for(int i = 0; i < excludes.length;i++) {
                            String path = file.path();
                            String exclude = excludes[i];

                            if(exclude.startsWith("!")) {
                                String substring = exclude.substring(1);
                                if (path.contains(substring)){
                                    stop = false;
                                    break;
                                }
                            }
                            else if (path.contains(exclude))	{
                                stop = true;
                            }
                        }
                    }

                    if(stop)
                        continue;


                    String className = getFullyQualifiedClassName(file);
                    CustomFileDescriptor codeFile = new CustomFileDescriptor(genDir + "/" + className + ".cpp");
                    if (file.lastModified() < codeFile.lastModified()) {
                        System.out.println("Code for '" + file.path() + "' up to date");
                        continue;
                    }
                    String javaContent = file.readString();
                    System.out.println("Parsing: " + file);
                    String codeParsed = parse(javaContent);
                    generateFile(file, codeParsed);
                }
            }
        }
    }

    private String getFullyQualifiedClassName (CustomFileDescriptor file) {
        String className = file.path().replace(sourceDir.path(), "").replace('\\', '.').replace('/', '.').replace(".java", "");
        if (className.startsWith(".")) className = className.substring(1);
        return className;
    }

    private String parse(String javaContent) throws Exception {
        CompilationUnit unit = StaticJavaParser.parse(new ByteArrayInputStream(javaContent.getBytes()));

        List<Node> childrenNodes = unit.getChildNodes();
        Iterator<Node> iterator = childrenNodes.iterator();


        return javaContent;
    }

    private void generateFile(CustomFileDescriptor fileName, String javaContent) {
        String packageFilePath = fileName.file().getAbsolutePath().replace(sourceDir.file().getAbsolutePath(), "");
        String fullPath = genDir.file().getAbsolutePath() + packageFilePath;
        CustomFileDescriptor fileDescriptor = new CustomFileDescriptor(fullPath);
        fileDescriptor.writeString(javaContent, false);
    }
}
