/*-------------------------------------------------------
 * This file was automatically generated by XpeCodeGen
 *
 * Dont make changes to this file
 *-------------------------------------------------------*/
package com.badlogic.gdx.physics.bullet.dynamics;

import com.badlogic.gdx.math.Matrix3;
import com.badlogic.gdx.math.Matrix4;
import com.badlogic.gdx.math.Quaternion;
import com.badlogic.gdx.math.Vector3;
import com.badlogic.gdx.physics.bullet.BulletBase;
import com.badlogic.gdx.physics.bullet.collision.btCollisionObject;
import com.badlogic.gdx.physics.bullet.collision.btCollisionShape;
import com.badlogic.gdx.physics.bullet.linearmath.btMotionState;
import com.badlogic.gdx.physics.bullet.linearmath.btQuaternion;
import com.badlogic.gdx.physics.bullet.linearmath.btVector3;

/** @author xpenatan */
public class btRigidBody extends btCollisionObject {

    protected btMotionState motionState;

    btTypedConstraint typedConstraint = new btTypedConstraint(0, false);

    @Override
    protected void create() // block super class from creating obj;
    {
    }

    public btRigidBody(btRigidBodyConstructionInfo constructionInfo) {
        this.shape = constructionInfo.collisionShape;
        this.motionState = constructionInfo.motionState;
        resetObj(createNative(constructionInfo.cPointer), true);
    }

    public btRigidBody(float mass, btMotionState motionState, btCollisionShape collisionShape, Vector3 localInertia) {
        this.shape = collisionShape;
        this.motionState = motionState;
        resetObj(createNative(mass, motionState != null ? motionState.cPointer : 0, collisionShape != null ? collisionShape.cPointer : 0, localInertia.x, localInertia.y, localInertia.z), true);
    }

    public btRigidBody(float mass, btMotionState motionState, btCollisionShape collisionShape) {
        this.shape = collisionShape;
        this.motionState = motionState;
        resetObj(createNative(mass, motionState != null ? motionState.cPointer : 0, collisionShape != null ? collisionShape.cPointer : 0, 0, 0, 0), true);
    }

    private static long createNative(long constructionInfoAddr) {
		com.dragome.commons.javascript.ScriptHelper.evalNoResult("var con=Bullet.wrapPointer(constructionInfoAddr,Bullet.btRigidBodyConstructionInfo);var cobj=new Bullet.btRigidBody(con);",null);
		return com.dragome.commons.javascript.ScriptHelper.evalLong("Bullet.getPointer(cobj);",null);
    }

    private static long createNative(float mass, long motionStateAddr, long collisionShapeAddr, float x, float y, float z) {
		com.dragome.commons.javascript.ScriptHelper.evalNoResult("var motion=Bullet.wrapPointer(motionStateAddr,Bullet.btMotionState);var shape=Bullet.wrapPointer(collisionShapeAddr,Bullet.btCollisionShape);var vec=Bullet.MyTemp.prototype.btVec3();vec.setValue(x,y,z);var cobj=new Bullet.btRigidBody(mass,motion,shape,vec);",null);
		return com.dragome.commons.javascript.ScriptHelper.evalLong("Bullet.getPointer(cobj);",null);
    }

    @Override
    protected void delete() {
        super.delete();
        if (motionState != null)
            motionState.dispose();
        motionState = null;
    }

    public btMotionState getMotionState() {
        return motionState;
    }

    public void setMotionState(btMotionState motionState) {
		checkPointer();
		this.motionState = motionState;
		if(motionState != null)
		com.dragome.commons.javascript.ScriptHelper.evalNoResult("this.$$$jsObj.setMotionState(motionState.$$$jsObj);",this);
    }

    public static class btRigidBodyConstructionInfo extends BulletBase {

        btMotionState motionState;

        btCollisionShape collisionShape;

        public btRigidBodyConstructionInfo(float mass, btMotionState motionState, btCollisionShape collisionShape, Vector3 localInertia) {
            this.motionState = motionState;
            this.collisionShape = collisionShape;
            resetObj(createNative(mass, motionState != null ? motionState.cPointer : 0, collisionShape != null ? collisionShape.cPointer : 0, localInertia.x, localInertia.y, localInertia.z), true);
        }

        public btRigidBodyConstructionInfo(float mass, btMotionState motionState, btCollisionShape collisionShape) {
            this.motionState = motionState;
            this.collisionShape = collisionShape;
            resetObj(createNative(mass, motionState != null ? motionState.cPointer : 0, collisionShape != null ? collisionShape.cPointer : 0, 0, 0, 0), true);
        }

        private static native long createNative(float mass, long motionStateAddr, long collisionShapeAddr, float x, float y, float z);
        //TODO need to finish other methods
    }
}
