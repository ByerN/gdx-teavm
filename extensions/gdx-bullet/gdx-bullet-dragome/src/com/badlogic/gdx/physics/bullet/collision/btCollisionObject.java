/*-------------------------------------------------------
 * This file was automatically generated by XpeCodeGen
 *
 * Dont make changes to this file
 *-------------------------------------------------------*/
package com.badlogic.gdx.physics.bullet.collision;

import com.badlogic.gdx.math.Matrix4;
import com.badlogic.gdx.math.Vector3;
import com.badlogic.gdx.physics.bullet.BulletBase;
import com.badlogic.gdx.physics.bullet.linearmath.btVector3;

/** @author xpenatan */
public class btCollisionObject extends BulletBase {

    btCollisionWorld world;

    public Object userData;

    protected btCollisionShape shape;

    private btBroadphaseProxy broadphaseProxy;

    public btCollisionObject() {
        create();
    }

    protected void create() {
        resetObj(createNative(), true);
    }

    public btCollisionObject(long cPtr, boolean cMemoryOwn) {
        resetObj(cPtr, cMemoryOwn);
    }

    @Override
    protected void delete() {
		long addr = cPointer;
		userData = null;
		com.dragome.commons.javascript.ScriptHelper.evalNoResult("var cobj=Bullet.wrapPointer(addr,Bullet.btCollisionObject);Bullet.destroy(cobj);",this);
		if(shape != null)
		shape.dispose();
		shape = null;
    }

    private static long createNative() {
		com.dragome.commons.javascript.ScriptHelper.evalNoResult("var cobj=new Bullet.btCollisionObject();",null);
		return com.dragome.commons.javascript.ScriptHelper.evalLong("Bullet.getPointer(cobj);",null);
    }

	protected void cacheObj() {
		com.dragome.commons.javascript.ScriptHelper.evalNoResult("this.$$$jsObj=Bullet.wrapPointer(this.$$$cPointer,Bullet.btCollisionObject);",this);
	}

    public btCollisionWorld getWorld() {
        checkPointer();
        return world;
    }

    public boolean mergesSimulationIslands() {
		checkPointer();
		return com.dragome.commons.javascript.ScriptHelper.evalBoolean("this.$$$jsObj.mergesSimulationIslands();",this);
    }

    public void getAnisotropicFriction(Vector3 out) {
		checkPointer();
		float x=0, y=0, z=0;
		com.dragome.commons.javascript.ScriptHelper.evalNoResult("var vec=this.$$$jsObj.getAnisotropicFriction();x=vec.x();z=vec.y();y=vec.z();",this);
		out.set(x,y,z);
    }

    public void setAnisotropicFriction(Vector3 anisotropicFriction, int frictionMode) {
		checkPointer();
		float x = anisotropicFriction.x;
		float y = anisotropicFriction.y;
		float z = anisotropicFriction.z;
		Object vec = btVector3.btVector3_1.jsObj;
		com.dragome.commons.javascript.ScriptHelper.evalNoResult("vec.setValue(x,y,z);this.$$$jsObj.setAnisotropicFriction(vec,frictionMode);",this);
    }

    public void setAnisotropicFriction(Vector3 anisotropicFriction) {
		checkPointer();
		setAnisotropicFriction(anisotropicFriction, AnisotropicFrictionFlags.CF_ANISOTROPIC_FRICTION);
    }

    public boolean hasAnisotropicFriction(int frictionMode) {
		checkPointer();
		return com.dragome.commons.javascript.ScriptHelper.evalBoolean("this.$$$jsObj.hasAnisotropicFriction(frictionMode);",this);
    }

    public boolean hasAnisotropicFriction() {
		checkPointer();
		return hasAnisotropicFriction(AnisotropicFrictionFlags.CF_ANISOTROPIC_FRICTION);
    }

    public void setContactProcessingThreshold(float contactProcessingThreshold) {
		checkPointer();
		com.dragome.commons.javascript.ScriptHelper.evalNoResult("this.$$$jsObj.setContactProcessingThreshold(contactProcessingThreshold);",this);
    }

    public float getContactProcessingThreshold() {
		checkPointer();
		return com.dragome.commons.javascript.ScriptHelper.evalFloat("this.$$$jsObj.getContactProcessingThreshold();",this);
    }

    public boolean isStaticObject() {
		checkPointer();
		return com.dragome.commons.javascript.ScriptHelper.evalBoolean("this.$$$jsObj.isStaticObject();",this);
    }

    public boolean isKinematicObject() {
		checkPointer();
		return com.dragome.commons.javascript.ScriptHelper.evalBoolean("this.$$$jsObj.isKinematicObject();",this);
    }

    public boolean isStaticOrKinematicObject() {
		checkPointer();
		return com.dragome.commons.javascript.ScriptHelper.evalBoolean("this.$$$jsObj.isStaticOrKinematicObject();",this);
    }

    public boolean hasContactResponse() {
		checkPointer();
		return com.dragome.commons.javascript.ScriptHelper.evalBoolean("this.$$$jsObj.hasContactResponse();",this);
    }

    public void setCollisionShape(btCollisionShape shape) {
		checkPointer();
		this.shape = shape;
		Object jsShape = shape.jsObj;
		com.dragome.commons.javascript.ScriptHelper.evalNoResult("this.$$$jsObj.setCollisionShape(jsShape);",this);
    }

    public btCollisionShape getCollisionShape() {
        checkPointer();
        return shape;
    }

    public void setIgnoreCollisionCheck(btCollisionObject co, boolean ignoreCollisionCheck) {
		checkPointer();
		Object jsObj = co.jsObj;
		com.dragome.commons.javascript.ScriptHelper.evalNoResult("this.$$$jsObj.setIgnoreCollisionCheck(jsObj);",this);
    }

    public boolean checkCollideWithOverride(btCollisionObject co) {
		checkPointer();
		Object jsObj = co.jsObj;
		return com.dragome.commons.javascript.ScriptHelper.evalBoolean("this.$$$jsObj.checkCollideWithOverride(jsObj);",this);
    }

    public int getActivationState() {
		checkPointer();
		return com.dragome.commons.javascript.ScriptHelper.evalInt("this.$$$jsObj.getActivationState();",this);
    }

    public void setActivationState(int newState) {
		checkPointer();
		com.dragome.commons.javascript.ScriptHelper.evalNoResult("this.$$$jsObj.setActivationState(newState);",this);
    }

    public void setDeactivationTime(float time) {
		checkPointer();
		com.dragome.commons.javascript.ScriptHelper.evalNoResult("this.$$$jsObj.setDeactivationTime(time);",this);
    }

    public float getDeactivationTime() {
		checkPointer();
		return com.dragome.commons.javascript.ScriptHelper.evalFloat("this.$$$jsObj.getDeactivationTime();",this);
    }

    public void forceActivationState(int newState) {
		checkPointer();
		com.dragome.commons.javascript.ScriptHelper.evalNoResult("this.$$$jsObj.forceActivationState(newState);",this);
    }

    public void activate(boolean forceActivation) {
		checkPointer();
		com.dragome.commons.javascript.ScriptHelper.evalNoResult("this.$$$jsObj.activate(forceActivation);",this);
    }

    public void activate() {
		checkPointer();
		com.dragome.commons.javascript.ScriptHelper.evalNoResult("this.$$$jsObj.activate();",this);
    }

    public boolean isActive() {
		checkPointer();
		return com.dragome.commons.javascript.ScriptHelper.evalBoolean("this.$$$jsObj.isActive();",this);
    }

    public void setRestitution(float rest) {
		checkPointer();
		com.dragome.commons.javascript.ScriptHelper.evalNoResult("this.$$$jsObj.setRestitution(rest);",this);
    }

    public float getRestitution() {
		checkPointer();
		return com.dragome.commons.javascript.ScriptHelper.evalFloat("this.$$$jsObj.getRestitution();",this);
    }

    public void setFriction(float frict) {
		checkPointer();
		com.dragome.commons.javascript.ScriptHelper.evalNoResult("this.$$$jsObj.setFriction(frict);",this);
    }

    public float getFriction() {
		checkPointer();
		return com.dragome.commons.javascript.ScriptHelper.evalFloat("this.$$$jsObj.getFriction();",this);
    }

    public void setRollingFriction(float frict) {
		checkPointer();
		com.dragome.commons.javascript.ScriptHelper.evalNoResult("this.$$$jsObj.setRollingFriction(frict);",this);
    }

    public float getRollingFriction() {
		checkPointer();
		return com.dragome.commons.javascript.ScriptHelper.evalFloat("this.$$$jsObj.getRollingFriction();",this);
    }

    public int getInternalType() {
		checkPointer();
		return com.dragome.commons.javascript.ScriptHelper.evalInt("this.$$$jsObj.getInternalType();",this);
    }

    public void getWorldTransform(Matrix4 out) {
		checkPointer();
		Object btTra = null;
		com.dragome.commons.javascript.ScriptHelper.evalNoResult("btTra=this.$$$jsObj.getWorldTransform();",this);
		com.badlogic.gdx.physics.bullet.linearmath.btTransform.getOpenGLMatrix(btTra, out.val);
    }

    public void setWorldTransform(Matrix4 worldTrans) {
		checkPointer();
		float [] value = worldTrans.val;
		Object btTran = com.badlogic.gdx.physics.bullet.linearmath.btTransform.btTransform_1.jsObj;
		com.dragome.commons.javascript.ScriptHelper.evalNoResult("btTran.setFromOpenGLMatrix(value);this.$$$jsObj.setWorldTransform(btTran);",this);
    }

    public btBroadphaseProxy getBroadphaseHandle() {
        checkPointer();
        return broadphaseProxy;
    }

    public void setBroadphaseHandle(btBroadphaseProxy handle) {
		checkPointer();
		this.broadphaseProxy = handle;
		Object handler = handle.jsObj;
		com.dragome.commons.javascript.ScriptHelper.evalNoResult("this.$$$jsObj.setBroadphaseHandle(handler);",this);
    }

    public void getInterpolationWorldTransform(Matrix4 out) {
		checkPointer();
		Object btTra = null;
		com.dragome.commons.javascript.ScriptHelper.evalNoResult("var btTra=this.$$$jsObj.getInterpolationWorldTransform();",this);
		com.badlogic.gdx.physics.bullet.linearmath.btTransform.getOpenGLMatrix(btTra, out.val);
    }

    public void setInterpolationWorldTransform(Matrix4 trans) {
		checkPointer();
		float [] value = trans.val;
		Object btTran = com.badlogic.gdx.physics.bullet.linearmath.btTransform.btTransform_1.jsObj;
		com.dragome.commons.javascript.ScriptHelper.evalNoResult("btTran.setFromOpenGLMatrix(value);this.$$$jsObj.setInterpolationWorldTransform(btTran);",this);
    }

    public void setInterpolationLinearVelocity(Vector3 linvel) {
		checkPointer();
		float x = linvel.x;
		float y = linvel.y;
		float z = linvel.z;
		Object btVec = com.badlogic.gdx.physics.bullet.linearmath.btVector3.btVector3_1.jsObj;
		com.dragome.commons.javascript.ScriptHelper.evalNoResult("btVec.setValue(x,y,z);this.$$$jsObj.setInterpolationLinearVelocity(btVec);",this);
    }

    public void setInterpolationAngularVelocity(Vector3 angvel) {
		checkPointer();
		float x = angvel.x;
		float y = angvel.y;
		float z = angvel.z;
		Object btVec = com.badlogic.gdx.physics.bullet.linearmath.btVector3.btVector3_1.jsObj;
		com.dragome.commons.javascript.ScriptHelper.evalNoResult("btVec.setValue(x,y,z);this.$$$jsObj.setInterpolationAngularVelocity(btVec);",this);
    }

    public void getInterpolationLinearVelocity(Vector3 out) {
		checkPointer();
		float x=0,y=0,z=0;
		com.dragome.commons.javascript.ScriptHelper.evalNoResult("var btVec=this.$$$jsObj.getInterpolationLinearVelocity();x=btVec.x();y=btVec.y();z=btVec.z();",this);
		out.set(x,y,z);
    }

    public void getInterpolationAngularVelocity(Vector3 out) {
		checkPointer();
		float x=0,y=0,z=0;
		com.dragome.commons.javascript.ScriptHelper.evalNoResult("var btVec=this.$$$jsObj.getInterpolationAngularVelocity();x=btVec.x();y=btVec.y();z=btVec.z();",this);
		out.set(x,y,z);
    }

    public int getIslandTag() {
		checkPointer();
		return com.dragome.commons.javascript.ScriptHelper.evalInt("this.$$$jsObj.getIslandTag();",this);
    }

    public void setIslandTag(int tag) {
		checkPointer();
		com.dragome.commons.javascript.ScriptHelper.evalNoResult("this.$$$jsObj.setIslandTag(tag);",this);
    }

    public int getCompanionId() {
		checkPointer();
		return com.dragome.commons.javascript.ScriptHelper.evalInt("this.$$$jsObj.getCompanionId();",this);
    }

    public void setCompanionId(int id) {
		checkPointer();
		com.dragome.commons.javascript.ScriptHelper.evalNoResult("this.$$$jsObj.setCompanionId(id);",this);
    }

    public float getHitFraction() {
		checkPointer();
		return com.dragome.commons.javascript.ScriptHelper.evalFloat("this.$$$jsObj.getHitFraction();",this);
    }

    public void setHitFraction(float hitFraction) {
		checkPointer();
		com.dragome.commons.javascript.ScriptHelper.evalNoResult("this.$$$jsObj.setHitFraction(hitFraction);",this);
    }

    public int getCollisionFlags() {
		checkPointer();
		return com.dragome.commons.javascript.ScriptHelper.evalInt("this.$$$jsObj.getCollisionFlags();",this);
    }

    public void setCollisionFlags(int flags) {
		checkPointer();
		com.dragome.commons.javascript.ScriptHelper.evalNoResult("this.$$$jsObj.setCollisionFlags(flags);",this);
    }

    public float getCcdSweptSphereRadius() {
		checkPointer();
		return com.dragome.commons.javascript.ScriptHelper.evalFloat("this.$$$jsObj.getCcdSweptSphereRadius();",this);
    }

    public void setCcdSweptSphereRadius(float radius) {
		checkPointer();
		com.dragome.commons.javascript.ScriptHelper.evalNoResult("this.$$$jsObj.setCcdSweptSphereRadius(radius);",this);
    }

    public float getCcdMotionThreshold() {
		checkPointer();
		return com.dragome.commons.javascript.ScriptHelper.evalFloat("this.$$$jsObj.getCcdMotionThreshold();",this);
    }

    public float getCcdSquareMotionThreshold() {
		checkPointer();
		return com.dragome.commons.javascript.ScriptHelper.evalFloat("this.$$$jsObj.getCcdSquareMotionThreshold();",this);
    }

    public void setCcdMotionThreshold(float ccdMotionThreshold) {
		checkPointer();
		com.dragome.commons.javascript.ScriptHelper.evalNoResult("this.$$$jsObj.setCcdMotionThreshold(ccdMotionThreshold);",this);
    }

    public int getUserIndex() {
		checkPointer();
		return com.dragome.commons.javascript.ScriptHelper.evalInt("this.$$$jsObj.getUserIndex();",this);
    }

    public void setUserIndex(int index) {
		checkPointer();
		com.dragome.commons.javascript.ScriptHelper.evalNoResult("this.$$$jsObj.setUserIndex(index);",this);
    }

    public int getUpdateRevisionInternal() {
		checkPointer();
		return com.dragome.commons.javascript.ScriptHelper.evalInt("this.$$$jsObj.getUpdateRevisionInternal();",this);
    }

    public boolean checkCollideWith(btCollisionObject co) {
		checkPointer();
		Object cobj = co.jsObj;
		return com.dragome.commons.javascript.ScriptHelper.evalBoolean("this.$$$jsObj.checkCollideWith(cobj);",this);
    }

    public static final class CollisionFlags {

        public static final int CF_STATIC_OBJECT = 1;

        public static final int CF_KINEMATIC_OBJECT = 2;

        public static final int CF_NO_CONTACT_RESPONSE = 4;

        public static final int CF_CUSTOM_MATERIAL_CALLBACK = 8;

        public static final int CF_CHARACTER_OBJECT = 16;

        public static final int CF_DISABLE_VISUALIZE_OBJECT = 32;

        public static final int CF_DISABLE_SPU_COLLISION_PROCESSING = 64;
    }

    public static final class CollisionObjectTypes {

        public static final int CO_COLLISION_OBJECT = 1;

        public static final int CO_RIGID_BODY = 2;

        public static final int CO_GHOST_OBJECT = 4;

        public static final int CO_SOFT_BODY = 8;

        public static final int CO_HF_FLUID = 16;

        public static final int CO_USER_TYPE = 32;

        public static final int CO_FEATHERSTONE_LINK = 64;
    }

    public static final class AnisotropicFrictionFlags {

        public static final int CF_ANISOTROPIC_FRICTION_DISABLED = 0;

        public static final int CF_ANISOTROPIC_FRICTION = 1;

        public static final int CF_ANISOTROPIC_ROLLING_FRICTION = 2;
    }
}
