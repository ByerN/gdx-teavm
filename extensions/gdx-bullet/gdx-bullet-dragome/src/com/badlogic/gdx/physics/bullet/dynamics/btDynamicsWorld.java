/*-------------------------------------------------------
 * This file was automatically generated by XpeCodeGen
 *
 * Dont make changes to this file
 *-------------------------------------------------------*/
package com.badlogic.gdx.physics.bullet.dynamics;

import com.badlogic.gdx.math.Vector3;
import com.badlogic.gdx.physics.bullet.collision.btCollisionWorld;
import com.badlogic.gdx.physics.bullet.linearmath.btVector3;

/** @author xpenatan */
public class btDynamicsWorld extends btCollisionWorld {

    btConstraintSolver constraintSolver;

    public int stepSimulation(float timeStep, int maxSubSteps, float fixedTimeStep) {
        return stepSimulation(cPointer, timeStep, maxSubSteps, fixedTimeStep);
    }

    public int stepSimulation(float timeStep, int maxSubSteps) {
        return stepSimulation(cPointer, timeStep, maxSubSteps, 1.0f / 60.0f);
    }

    public int stepSimulation(float timeStep) {
        return stepSimulation(cPointer, timeStep, 1, 1.0f / 60.0f);
    }

    private int stepSimulation(long addr, float timeStep, int maxSubSteps, float fixedTimeStep) {
		return com.dragome.commons.javascript.ScriptHelper.evalInt("this.$$$jsObj.stepSimulation(timeStep,maxSubSteps,fixedTimeStep);",this);
    }

    public void addConstraint(btTypedConstraint constraint, boolean disableCollisionsBetweenLinkedBodies) {
        addConstraint(cPointer, constraint.cPointer, disableCollisionsBetweenLinkedBodies);
    }

    public void addConstraint(btTypedConstraint constraint) {
        addConstraint(cPointer, constraint.cPointer, false);
    }

    private void addConstraint(long addr, long typedConstraintAddr, boolean disableCollisionsBetweenLinkedBodies) {
		com.dragome.commons.javascript.ScriptHelper.evalNoResult("var typedCon=Bullet.wrapPointer(typedConstraintAddr,Bullet.btTypedConstraint);this.$$$jsObj.addConstraint(typedCon,disableCollisionsBetweenLinkedBodies);",this);
    }

    public void removeConstraint(btTypedConstraint constraint) {
        removeConstraint(cPointer, constraint.cPointer);
    }

    private void removeConstraint(long addr, long typedConstraintAddr) {
		com.dragome.commons.javascript.ScriptHelper.evalNoResult("var typedCon=Bullet.wrapPointer(typedConstraintAddr,Bullet.btTypedConstraint);this.$$$jsObj.removeConstraint(typedCon);",this);
    }

    public void addAction(btActionInterface action) {
		com.dragome.commons.javascript.ScriptHelper.evalNoResult("this.$$$jsObj.addAction(action.$$$jsObj);",this);
    }

    public void removeAction(btActionInterface action) {
		com.dragome.commons.javascript.ScriptHelper.evalNoResult("this.$$$jsObj.removeAction(action.$$$jsObj);",this);
    }

    public void setGravity(float x, float y, float z) {
		checkPointer();
		com.dragome.commons.javascript.ScriptHelper.evalNoResult("var gravity=Bullet.MyTemp.prototype.btVec3();gravity.setValue(x,y,z);this.$$$jsObj.setGravity(gravity);",this);
    }

    public void getGravity(Vector3 out) {
		checkPointer();
		float x=0,y=0,z=0;
		com.dragome.commons.javascript.ScriptHelper.evalNoResult("var gravity=this.$$$jsObj.getGravity();x=gravity.x();y=gravity.y();z=gravity.z();",this);
		out.set(x,y,z);
    }

    public void addRigidBody(btRigidBody body) {
		checkPointer();
		addBody(body);
		com.dragome.commons.javascript.ScriptHelper.evalNoResult("this.$$$jsObj.addRigidBody(body.$$$jsObj);",this);
    }

    public void addRigidBody(btRigidBody body, short group, short mask) {
		checkPointer();
		addBody(body);
		com.dragome.commons.javascript.ScriptHelper.evalNoResult("this.$$$jsObj.addRigidBody(body.$$$jsObj,group,mask);",this);
    }

    public void removeRigidBody(btRigidBody body) {
		checkPointer();
		removeBody(body);
		com.dragome.commons.javascript.ScriptHelper.evalNoResult("this.$$$jsObj.removeRigidBody(body.$$$jsObj);",this);
    }

    public void setConstraintSolver(btConstraintSolver solver) {
		checkPointer();
		this.constraintSolver = solver;
		com.dragome.commons.javascript.ScriptHelper.evalNoResult("this.$$$jsObj.setConstraintSolver(solver.$$$jsObj);",this);
    }

    public btConstraintSolver getConstraintSolver() {
        return constraintSolver;
    }

    public int getNumConstraints() {
		checkPointer();
		return com.dragome.commons.javascript.ScriptHelper.evalInt("this.$$$jsObj.getNumConstraints();",this);
    }

    public void clearForces() {
		checkPointer();
		com.dragome.commons.javascript.ScriptHelper.evalNoResult("this.$$$jsObj.clearForces();",this);
    }
}
