/*-------------------------------------------------------
 * This file was automatically generated by XpeCodeGen
 *
 * Dont make changes to this file
 *-------------------------------------------------------*/
package com.badlogic.gdx.physics.bullet.linearmath;

import com.badlogic.gdx.math.Vector3;
import com.badlogic.gdx.physics.bullet.BulletBase;

/** @author xpenatan */
public class btIDebugDraw extends BulletBase {

    public btIDebugDraw() {
        resetObj(createNative(), true);
    }

    private long createNative() {
		Vector3 tmp1 = com.badlogic.gdx.physics.bullet.linearmath.btVector3.vector3_1;
		Vector3 tmp2 = com.badlogic.gdx.physics.bullet.linearmath.btVector3.vector3_2;
		Vector3 tmp3 = com.badlogic.gdx.physics.bullet.linearmath.btVector3.vector3_3;
		com.dragome.commons.javascript.ScriptHelper.evalNoResult("var debugDraw=new Bullet.MyDebugDraw();var self=this;debugDraw.drawLine=function(vecFrom,vecTo,color){vecFrom=Bullet.wrapPointer(vecFrom,Bullet.btVector3);vecTo=Bullet.wrapPointer(vecTo,Bullet.btVector3);color=Bullet.wrapPointer(color,Bullet.btVector3);tmp1.$$$x=vecFrom.x();tmp1.$$$y=vecFrom.y();tmp1.$$$z=vecFrom.z();tmp2.$$$x=vecTo.x();tmp2.$$$y=vecTo.y();tmp2.$$$z=vecTo.z();tmp3.$$$x=color.x();tmp3.$$$y=color.y();tmp3.$$$z=color.z();self.$drawLine___com_badlogic_gdx_math_Vector3__com_badlogic_gdx_math_Vector3__com_badlogic_gdx_math_Vector3$void(tmp1,tmp2,tmp3);};debugDraw.drawContactPoint=function(pointOnB,normalOnB,distance,lifeTime,color){pointOnB=Bullet.wrapPointer(pointOnB,Bullet.btVector3);normalOnB=Bullet.wrapPointer(normalOnB,Bullet.btVector3);color=Bullet.wrapPointer(color,Bullet.btVector3);tmp1.$$$x=pointOnB.x();tmp1.$$$y=pointOnB.y();tmp1.$$$z=pointOnB.z();tmp2.$$$x=normalOnB.x();tmp2.$$$y=normalOnB.y();tmp2.$$$z=normalOnB.z();tmp3.$$$x=color.x();tmp3.$$$y=color.y();tmp3.$$$z=color.z();self.$drawContactPoint___com_badlogic_gdx_math_Vector3__com_badlogic_gdx_math_Vector3__float__int__com_badlogic_gdx_math_Vector3$void(tmp1,tmp2,distance,lifeTime,tmp3);};debugDraw.draw3dText=function(location,textString){location=Bullet.wrapPointer(location,Bullet.btVector3);};debugDraw.getDebugMode=function(){return self.$getDebugMode$int();};",this);
		return com.dragome.commons.javascript.ScriptHelper.evalLong("Bullet.getPointer(debugDraw);",this);
    }

	protected void cacheObj() {
		com.dragome.commons.javascript.ScriptHelper.evalNoResult("this.$$$jsObj=Bullet.wrapPointer(this.$$$cPointer,Bullet.MyDebugDraw);",this);
	}

    @Override
    protected void delete() {
		long addr = cPointer;
		com.dragome.commons.javascript.ScriptHelper.evalNoResult("var cobj=Bullet.wrapPointer(addr,Bullet.MyDebugDraw);Bullet.destroy(cobj);",this);
    }

    public void drawLine(Vector3 from, Vector3 to, Vector3 color) {
    }

    public void drawContactPoint(Vector3 pointOnB, Vector3 normalOnB, float distance, int lifeTime, Vector3 color) {
    }

    public void reportErrorWarning(String warningString) {
    //FIXME not impl
    }

    public //FIXME not impl
    void draw3dText(//FIXME not impl
    Vector3 location, //FIXME not impl
    String textString) {
    }

    public void setDebugMode(int debugMode) {
        setDebugMode(cPointer, debugMode);
    }

    private static native void setDebugMode(long addr, int debugMode);

    public int getDebugMode() {
        return 0;
    }

    public static final class DebugDrawModes {

        public static final int DBG_NoDebug = 0;

        public static final int DBG_DrawWireframe = 1;

        public static final int DBG_DrawAabb = 2;

        public static final int DBG_DrawFeaturesText = 4;

        public static final int DBG_DrawContactPoints = 8;

        public static final int DBG_NoDeactivation = 16;

        public static final int DBG_NoHelpText = 32;

        public static final int DBG_DrawText = 64;

        public static final int DBG_ProfileTimings = 128;

        public static final int DBG_EnableSatComparison = 256;

        public static final int DBG_DisableBulletLCP = 512;

        public static final int DBG_EnableCCD = 1024;

        public static final int DBG_DrawConstraints = (1 << 11);

        public static final int DBG_DrawConstraintLimits = (1 << 12);

        public static final int DBG_FastWireframe = (1 << 13);

        public static final int DBG_DrawNormals = (1 << 14);

        public static final int DBG_DrawFrames = (1 << 15);

        public static final int DBG_MAX_DEBUG_DRAW_MODE = DBG_DrawFrames + 1;
    }
}
